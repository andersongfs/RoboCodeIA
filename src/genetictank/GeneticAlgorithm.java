package genetictank;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class GeneticAlgorithm {
	/**
	 * Params to geneticAlgorithm
	 */
	private int POPULATION_SIZE = 20;
	private int MIN_BULLET_POWER = 1;
	private int MAX_BULLET_POWER = 3;
	private int CHROMOSOME_PARAMS_SIZE = 9; // QUANTITY OF MOVES AND ROTATIONS THAT A CHROMOSOME MUST HAVE

	private Population population;

	public void generateRandomPopulation(){
		population = new Population(POPULATION_SIZE);
		for(int i = 0; i < POPULATION_SIZE; i++){
			population.addChromosome(generateRandomChromosome(i));
		}
	}

	private Chromosome generateRandomChromosome(int id) {
		Chromosome chromosome = new Chromosome(id);
		List<Double> rotations = new ArrayList<Double>();
		List<Double> moves = new ArrayList<Double>();

		for(int i = 0; i < CHROMOSOME_PARAMS_SIZE; i++) {
			rotations.add((double)randomInt(0, 180));
			moves.add((double)randomInt(100, 500));
		}

		chromosome.setRotations(rotations);
		chromosome.setDistances(moves);
		chromosome.setBulletPower(randomInt(MIN_BULLET_POWER, MAX_BULLET_POWER));

		return chromosome;

	}
	
	/**
	 * returns a list with the two chromosomes generated by the crossOver of the two given ones 
	 * @param c1 
	 * @param c2
	 * @return
	 */
	private Chromosome[] crossOver(Chromosome c1, Chromosome c2){
		Chromosome r1 = new Chromosome(randomInt(0, 999999999));
		Chromosome r2 = new Chromosome(randomInt(0, 999999999));
		
		int splitPoint = randomInt(0, CHROMOSOME_PARAMS_SIZE);
		
		List<Double> rotationR1 = new ArrayList<Double>();
		List<Double> rotationR2 = new ArrayList<Double>();
		List<Double> distanceR1 = new ArrayList<Double>();
		List<Double> distanceR2 = new ArrayList<Double>();
		
		for (int i = 0; i < splitPoint; i++) {
			rotationR1.add(c1.getNextRotations().get(i));
			distanceR1.add(c1.getDistances().get(i));
		
			rotationR2.add(c2.getNextRotations().get(i));
			distanceR2.add(c2.getDistances().get(i));
			
		}
		
		for (int i = splitPoint; i < CHROMOSOME_PARAMS_SIZE; i++) {
			rotationR1.add(c2.getNextRotations().get(i));
			distanceR1.add(c2.getDistances().get(i));
			
			rotationR2.add(c1.getNextRotations().get(i));
			distanceR2.add(c1.getDistances().get(i));
		}
		
		r1.setDistances(distanceR1);
		r1.setRotations(rotationR1);
		
		r2.setRotations(rotationR2);
		r2.setRotations(rotationR2);
		
		if(randomInt(0,1)!= 0){
			r1.setBulletPower(c1.getBulletPower());
			r2.setBulletPower(c2.getBulletPower());
		}else{
			r1.setBulletPower(c2.getBulletPower());
			r2.setBulletPower(c1.getBulletPower());
		}
		
		Chromosome[] result = {r1,r2};
		return result;
	}

	private int randomInt(int start, int end) {
		Random rand = new Random();
		return rand.nextInt(end - start + 1) + start;
	}

}
